{"version":3,"file":"stock.service.js","sourceRoot":"","sources":["stock.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Jsonp, URLSearchParams } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\nimport { AngularFire, FirebaseListObservable } from 'angularfire2';\n\nimport { Stock } from './stock';\n\nconst STOCK_ENDPOINT = 'http://dev.markitondemand.com/MODApis/Api/v2/';\nconst METHOD_EXTENSION = '/jsonp';\nconst FIND_STOCK_ENDPOINT = STOCK_ENDPOINT + 'Lookup' + METHOD_EXTENSION;\nconst INTERACTIVE_CHART_ENDPOINT = STOCK_ENDPOINT + 'InteractiveChart' + METHOD_EXTENSION;\n\n@Injectable()\nexport class StockService {\n\n  public stocks: FirebaseListObservable<Stock[]>;\n  private indexes:string[] = [];\n  \n  constructor(\n    private jsonp:Jsonp,\n    private af:AngularFire\n  ) { \n    this.stocks = af.database.list('/stocks');\n    this.stocks.subscribe(stocks => this.indexes = stocks.map(stock => this.getKey(stock)));\n  }\n  \n  /**\n   * Adds the given stock to the watch list. \n   * Returns true if it was added and false if it already existed in the watch list.\n   */\n  addStock(stock:Stock) {\n    if (this.indexes.indexOf(this.getKey(stock)) >= 0) {\n      return false;\n    }  \n        \n    this.stocks.push(stock);\n    return true;\n  }\n  \n  removeStock(stock:Stock) {\n    this.stocks.remove(stock);\n  }\n  \n  // creates a unique id for each stock to avoid duplicates.\n  private getKey(stock:Stock):string {\n    return stock.exchange + ':' + stock.symbol;\n  }\n  \n  /**\n   * Lookup for a stock based on parts of its name/symbol\n   */\n  findStocks(searchQuery: string): Observable<Stock[]> {\n    if (searchQuery.length === 0) {\n      return Observable.of([]);\n    }\n\n    let search = new URLSearchParams()\n    search.set('input', searchQuery);\n    search.set('jsoncallback', 'JSONP_CALLBACK');\n    \n    return this.jsonp\n      .get(FIND_STOCK_ENDPOINT, { search })\n      .map(res => <any[]>res.json())\n      .map(array => { return array.map(\n          s => <Stock>{ 'symbol':s.Symbol, 'name':s.Name, 'exchange':s.Exchange }\n        ) } \n      )\n      .map(array => array.filter(stock => stock.exchange === 'NYSE' || stock.exchange === 'NASDAQ'));\n  }\n  \n  /**\n   * Query for data\n   */\n  interactiveChart(stocks:Stock[]):Observable<any> {\n    \n    let elements = stocks.map(this.mapStock);\n        \n    let interactiveChartDataInput = {\n        Normalized: false,\n        EndDate:    '2015-05-01T00:00:00-00',\n        NumberOfDays: 60,\n        DataPeriod: 'Day',\n        LabelPeriod: 'Week',\n        LabelInterval: 1,\n        Elements: elements\n    };\n    \n    let search = new URLSearchParams()\n    search.set('parameters', JSON.stringify(interactiveChartDataInput));\n    search.set('jsoncallback', 'JSONP_CALLBACK');\n    \n    return this.jsonp\n      .get(INTERACTIVE_CHART_ENDPOINT, { search })\n      .map(res => <Object>res.json());\n  }\n  \n  /**\n   * Creates an element of a stock as input to the interactiveChart API\n   */\n  private mapStock(stock:Stock):Object {\n    return { \n      Symbol: stock.symbol, \n      Type: \"price\", \n      Params: ['c']       \n    };\n  } \n}\n"]}