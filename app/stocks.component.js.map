{"version":3,"file":"stocks.component.js","sourceRoot":"","sources":["stocks.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA0B,eAAe,CAAC,CAAA;AAC1C,uBAAwB,iBAAiB,CAAC,CAAA;AAC1C,8BAA4B,iBAAiB,CAAC,CAAA;AAG9C,QAAO,gCAAgC,CAAC,CAAA;AACxC,QAAO,wCAAwC,CAAC,CAAA;AAChD,QAAO,6BAA6B,CAAC,CAAA;AAErC,gCAA+B,mBAAmB,CAAC,CAAA;AACnD,uCAAwC,0BAA0B,CAAC,CAAA;AASnE;IAaE,4BAAoB,YAAyB;QAb/C,iBA+CC;QAlCqB,iBAAY,GAAZ,YAAY,CAAa;QAR7C,6CAA6C;QACrC,gBAAW,GAAG,IAAI,gBAAO,EAAE,CAAC;QAC5B,uBAAkB,GAAW,EAAE,CAAC;QAChC,kBAAa,GAAW,KAAK,CAAC;QAEtC,sBAAsB;QACd,WAAM,GAAW,EAAE,CAAC;QAG1B,iCAAiC;QACjC,IAAI,CAAC,WAAW;aACb,YAAY;aACZ,GAAG,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC;aACjD,YAAY,CAAC,GAAG,CAAC;aACjB,oBAAoB,EAAE;aACtB,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,EAAnC,CAAmC,CAAC;aACvD,SAAS,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC,CAAC,KAAI,CAAC,kBAAkB,GAAG,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;QAE7E,yBAAyB;QACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,MAAM,EAApB,CAAoB,CAAC,CAAC;IACvE,CAAC;IAED,qCAAQ,GAAR,UAAS,KAAW;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,UAAU,CAAC,sCAAsC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QACvE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,GAAG,0BAA0B,CAAC,CAAC;QACtE,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,wCAAW,GAAX,UAAY,KAAY;QACtB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,CAAC,gBAAgB,GAAG,KAAK,CAAC,IAAI,GAAG,sBAAsB,CAAC,CAAC;IAC1E,CAAC;IAED,qDAAqD;IAC7C,uCAAU,GAAlB,UAAmB,OAAc;QAAjC,iBAGC;QAFC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,GAAG,IAAI,EAAnB,CAAmB,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IArDH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,YAAY;YACtB,WAAW,EAAE,uBAAuB;YACpC,UAAU,EAAE,CAAC,gCAAc,EAAE,gDAAuB,CAAC;YACrD,SAAS,EAAE,CAAC,4BAAY,CAAC;SAC1B,CAAC;;0BAAA;IAgDF,yBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,0BAAkB,qBA+C9B,CAAA","sourcesContent":["import { Component } from '@angular/core';\nimport { Control } from '@angular/common';\nimport { StockService} from './stock.service';\nimport { Stock} from './stock';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\n\nimport { ChartComponent } from './chart.component';\nimport { StocksTableAppComponent } from './stocks-table.component';\n\n@Component({\n  moduleId: module.id,\n  selector: 'stocks-app',\n  templateUrl: 'stocks.component.html',\n  directives: [ChartComponent, StocksTableAppComponent],\n  providers: [StockService]\n})\nexport class StocksAppComponent {\n  \n  // info message\n  private message:string;\n  \n  // search control and results from the search\n  private searchStock = new Control();\n  private searchStockResults:Stock[] = [];\n  private queryUnderway:boolean = false;\n  \n  // stocks to visualize\n  private stocks:Stock[] = [];\n  \n  constructor(private stockService:StockService) {\n    // bind search control to results\n    this.searchStock\n      .valueChanges\n      .map(e => { this.queryUnderway = true; return e })\n      .debounceTime(400)\n      .distinctUntilChanged()\n      .switchMap(query => this.stockService.findStocks(query))\n      .subscribe(r => { this.queryUnderway = false; this.searchStockResults = r });\n      \n      // bind stocks to service\n      this.stockService.stocks.subscribe(stocks => this.stocks = stocks);\n  }\n  \n  addStock(stock:Stock):void {\n    let added = this.stockService.addStock(stock);\n    if (!added) {\n      this.setMessage('You are already following the stock ' + stock.name);\n    } else {\n      this.setMessage('Stock ' + stock.name + ' added to the watch list');\n    }\n    this.searchStock.updateValue(\"\");\n  }\n  \n  removeStock(stock: Stock):void {\n    this.stockService.removeStock(stock); \n    this.setMessage('Removed stock ' + stock.name + ' from the watch list');\n  }\n  \n  // sets info messages and removes it after 5 seconds.\n  private setMessage(message:string) {\n    this.message = message;\n    setTimeout(() => this.message = null, 5000);\n  }\n}\n"]}