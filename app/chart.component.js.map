{"version":3,"file":"chart.component.js","sourceRoot":"","sources":["chart.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAoD,eAAe,CAAC,CAAA;AACpE,8BAA4B,iBAAiB,CAAC,CAAA;AAI9C,2BAAiC,uBAAuB,CAAC,CAAA;AASzD;IAUE,wBAAoB,YAAyB;QAAzB,iBAAY,GAAZ,YAAY,CAAa;QAJtC,kBAAa,GAAc,EAAE,CAAC;QAC9B,oBAAe,GAAc,EAAE,CAAC;IAGU,CAAC;IAElD,oCAAW,GAAX;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAED,oCAAW,GAAX;QAAA,iBA2BC;QA1BC,oCAAoC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;aAC5C,SAAS,CAAC,UAAA,IAAI;YACb,qBAAqB;YAErB,6DAA6D;YAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/B,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAClC,KAAI,CAAC,OAAO,GAAG,8EAA8E,CAAC;gBAC9F,MAAM,CAAC;YACT,CAAC;YAED,4DAA4D;YAC5D,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,SAAS,CAAC,CAAC,EAAC,EAAE,CAAC,EAA1B,CAA0B,CAAC,CAAC;YAChF,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAApC,CAAoC,CAAC,CAAC;QAC9F,CAAC,EACD,UAAA,KAAK;YACH,KAAI,CAAC,OAAO,GAAG,8CAA8C,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACK,2CAAkB,GAA1B,UAA2B,IAAI;QAC7B,MAAM,CAAC;YACL,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM;YAClC,KAAK,EAAE,IAAI,CAAC,MAAM;YAClB,IAAI,EAAE,KAAK;SACZ,CAAA;IACH,CAAC;IArDD;QAAC,YAAK,EAAE;;kDAAA;IATV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,sBAAsB;YACnC,UAAU,EAAE,CAAC,6BAAgB,CAAC;YAC9B,SAAS,EAAE,CAAC,qBAAqB,CAAC;SACnC,CAAC;;sBAAA;IAyDF,qBAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,sBAAc,iBAwD1B,CAAA","sourcesContent":["import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { StockService} from './stock.service';\nimport { Stock} from './stock';\nimport { Observable } from 'rxjs/Observable';\n\nimport { CHART_DIRECTIVES } from 'ng2-charts/ng2-charts';\n\n@Component({\n  moduleId: module.id,\n  selector: 'stocks-chart',\n  templateUrl: 'chart.component.html',\n  directives: [CHART_DIRECTIVES],\n  styleUrls: ['chart.component.css']\n})\nexport class ChartComponent implements OnChanges {\n  \n  @Input() stocks:Stock[];\n\n  // chart options\n  message:string;\n  public lineChartData:Array<any> = [];\n  public lineChartLabels:Array<any> = [];\n  \n  \n  constructor(private stockService:StockService) { }\n  \n  ngOnChanges() {\n      this.updateChart();\n  }\n  \n  updateChart() {\n    // Don't query if we have no stocks.\n    if (this.stocks.length === 0) {\n      this.lineChartData = [];\n      this.lineChartLabels = [];\n      return;\n    }\n\n    this.stockService.interactiveChart(this.stocks)\n      .subscribe(data => {\n        // console.log(data);\n        \n        // sometimes the web service does not have data on the stocks\n        if (data.Elements.length === 0) {\n          console.warn(\"no data available\");\n          this.message = 'Unfortunately, the webservice does not have data on the stocks you selected.';\n          return;\n        }\n        \n        // if we get data, format it to the required chart.js format\n        this.message = null;\n        this.lineChartLabels = data.Dates.map(dateString => dateString.substring(0,10));\n        this.lineChartData = data.Elements.map(singleStock => this.mapSingleStockData(singleStock));\n      }, \n      error => {\n        this.message = \"An error occured retrieving the stock data: \" + JSON.stringify(error);\n      });\n  }\n  \n  /**\n   * Maps data of a single stock from the format retrieved by the web service to the\n   * format required by chart.js\n   */\n  private mapSingleStockData(data) {\n    return {\n      data: data.DataSeries.close.values,\n      label: data.Symbol,\n      fill: false\n    }\n  }\n}\n"]}